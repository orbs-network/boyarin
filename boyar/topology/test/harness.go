package test

import (
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/orbs-network/boyarin/boyar/topology/ethereum"
	"os"
	"testing"
)

const TopologyContractBytecode = `0x608060405260016040519080825280602002602001820160405280156100345781602001602082028038833980820191505090505b506000908051906020019061004a929190610194565b50600160405190808252806020026020018201604052801561007b5781602001602082028038833980820191505090505b5060019080519060200190610091929190610218565b5034801561009e57600080fd5b507f6e2cb55e4cbe97bf5b1e731d51cc2c285d83cbf90000000000000000000000006000808154811015156100cf57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c01000000000000000000000000900402179055507f0dea8f0f000000000000000000000000000000000000000000000000000000006001600081548110151561014257fe5b90600052602060002090600891828204019190066004026101000a81548163ffffffff02191690837c010000000000000000000000000000000000000000000000000000000090040217905550610358565b828054828255906000526020600020908101928215610207579160200282015b828111156102065782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c0100000000000000000000000090040217905550916020019190600101906101b4565b5b50905061021491906102e2565b5090565b828054828255906000526020600020906007016008900481019282156102d15791602002820160005b8382111561029f57835183826101000a81548163ffffffff02191690837c0100000000000000000000000000000000000000000000000000000000900402179055509260200192600401602081600301049283019260010302610241565b80156102cf5782816101000a81549063ffffffff021916905560040160208160030104928301926001030261029f565b505b5090506102de9190610325565b5090565b61032291905b8082111561031e57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055506001016102e8565b5090565b90565b61035591905b8082111561035157600081816101000a81549063ffffffff02191690555060010161032b565b5090565b90565b610259806103676000396000f3fe608060405234801561001057600080fd5b5060043610610048576000357c010000000000000000000000000000000000000000000000000000000090048063204296731461004d575b600080fd5b6100556100f4565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561009c578082015181840152602081019050610081565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156100de5780820151818401526020810190506100c3565b5050505090500194505050505060405180910390f35b606080600060018180548060200260200160405190810160405280929190818152602001828054801561016e57602002820191906000526020600020905b8160009054906101000a90046c01000000000000000000000000026bffffffffffffffffffffffff191681526020019060010190808311610132575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561021e57602002820191906000526020600020906000905b82829054906101000a90047c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116101af5790505b5050505050905091509150909156fea165627a7a72305820a800627d6ee117e17d40d8fd05c8de033fea5a503af6894cabae35aaf23dae9e0029`

type harness struct {
	rpcAdapter ethereum.DeployingEthereumConnection
	address    string
	config     *ethereumConnectorConfig
}

type ethereumConnectorConfig struct {
	endpoint      string
	privateKeyHex string
}

func (c *ethereumConnectorConfig) EthereumEndpoint() string {
	return c.endpoint
}

func (h *harness) getAddress() string {
	return h.address
}

func (h *harness) deployContract(abi string, bytecode string) (*common.Address, error) {
	auth, err := h.authFromConfig()
	if err != nil {
		return nil, err
	}
	address, _, err := h.rpcAdapter.DeployEthereumContract(auth, abi, bytecode)
	if err != nil {
		return nil, err
	}

	return address, nil
}

func newRpcEthereumConnectorHarness(tb testing.TB, cfg *ethereumConnectorConfig) *harness {
	a := ethereum.NewEthereumRpcConnection(cfg)

	return &harness{
		config:     cfg,
		rpcAdapter: a,
	}
}

func (h *harness) authFromConfig() (*bind.TransactOpts, error) {
	key, err := crypto.HexToECDSA(h.config.privateKeyHex)
	if err != nil {
		return nil, err
	}

	return bind.NewKeyedTransactor(key), nil
}

func skipUnlessEthereumIsEnabled(t *testing.T) {
	if os.Getenv("ENABLE_ETHEREUM") != "true" {
		t.Skip("skipping test, ethereum is disabled")
	}
}

func getConfig() *ethereumConnectorConfig {
	var cfg ethereumConnectorConfig

	//return &ethereumConnectorConfig{
	//	endpoint:      "http://localhost:7545",
	//	privateKeyHex: "7a16631b19e5a7d121f13c3ece279c10c996ff14d8bebe609bf1eca41211b291", // mnemonic for this pk: pet talent sugar must audit chief biology trash change wheat educate bone
	//}

	if endpoint := os.Getenv("ETHEREUM_ENDPOINT"); endpoint != "" {
		cfg.endpoint = endpoint
	}

	if privateKey := os.Getenv("ETHEREUM_PRIVATE_KEY"); privateKey != "" {
		cfg.privateKeyHex = privateKey
	}

	return &cfg
}
